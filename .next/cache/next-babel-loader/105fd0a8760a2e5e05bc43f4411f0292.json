{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useRef, useEffect } from \"react\";\n\nconst Canvas7 = props => {\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    var context = canvas.getContext(\"2d\");\n    canvas.height = 300;\n    canvas.width = 800;\n    let r = 0;\n    let g = 127;\n    let b = 255;\n    let shouldInc = true;\n\n    let draw = function draw() {\n      if (g === 255) shouldInc = false;\n      if (g === 0) shouldInc = true;\n      shouldInc ? r++ : r--;\n      shouldInc ? g++ : g--;\n      shouldInc ? b++ : b--;\n      let gradient = context.createLinearGradient(0, 0, 0, canvas.height);\n      gradient.addColorStop(0, \"rgb(\" + Math.abs(r) + \", \" + Math.abs(g) + \", \" + Math.abs(b) + \")\");\n      gradient.addColorStop(1, \"rgb(\" + Math.abs(255 - r) + \", \" + Math.abs(255 - g) + \", \" + Math.abs(255 - b) + \")\");\n      context.save();\n      context.fillStyle = gradient;\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      context.fillRect(0, 0, canvas.width, canvas.height);\n      context.restore();\n      window.requestAnimationFrame(draw);\n    };\n\n    draw();\n  });\n  return __jsx(\"canvas\", _extends({\n    ref: canvasRef\n  }, props, {\n    style: {\n      background: \"rgb(13, 13, 33)\",\n      width: \"100%\",\n      height: \"auto\",\n      borderRadius: 12\n    }\n  }));\n};\n\nexport default Canvas7;","map":null,"metadata":{},"sourceType":"module"}